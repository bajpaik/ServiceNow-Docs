<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function() {
  /* widget controller */
  var c = this;
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id/>
        <internal>false</internal>
        <link><![CDATA[function(scope, el) {
  var chart1 = new Highcharts.Chart({  
  chart: {  
      renderTo: el[0],  
      type: scope.options.chart_type  
  },  
  title: {  
      text: scope.options.chart_title  
  },  
  xAxis: {  
      categories: scope.data.categories,  
      title: {  
          text: null  
      },  
      labels: {  
          rotation: -45  
      }  
  },  
  yAxis: {  
      min: 0,  
      title: {  
          text: null  
      }  
  },  
  series: scope.data.series  
 });
}]]></link>
        <name>Copy of HighCharts</name>
        <option_schema>[{"hint":"Title of the chart displayed at the top of the chart","name":"chart_title","label":"Chart Title","type":"string"},{"hint":"Name of the data series, displayed in the chart legend","name":"series_name","label":"Series Name","type":"string"},{"hint":"Type of chart to display in the widget","name":"chart_type","label":"Chart Type","type":"choice","choices":[{"label":"line","value":"line"},{"label":"area","value":"area"},{"label":"bar","value":"bar"},{"label":"column","value":"column"}]},{"displayValue":"Table","hint":"Table to query for chart data","name":"table","label":"Table","type":"string","value":"sys_db_object","ed":{"reference":"sys_db_object"}},{"hint":"Encoded Query to filter the data to display in the chart","name":"query","label":"Query","type":"string"},{"hint":"Aggregate method to use when collecting data for the chart","name":"aggregate","label":"Aggregate","type":"choice","choices":[{"label":"Count","value":"Count"},{"label":"Sum","value":"Sum"},{"label":"Avg","value":"Avg"}]},{"hint":"Field to aggregate","name":"aggregate_field","label":"Aggregate Field","type":"string"},{"hint":"Field to use as the x-axis of the table","name":"group_by","label":"Group By","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
	var series = {},
			category,
			count,
			ga;
	
	if (options.chart_title == 'default' || !options.chart_title) {
		options.chart_title = null;
	}
	
	if (options.series_name == 'default' || !options.series_name) {
		options.series_name = 'Open';
	}
	
	if (options.chart_type == 'default' || !options.chart_type) {
		options.chart_type = 'column';
	}
	
	if (options.table == 'default' || !options.table) {
		options.table = 'incident';
	}
	
	if (options.query == 'default' || !options.query) {
		options.query = 'stateIN1,2,3,4,5';
	}
	
	if (options.aggregate == 'default' || !options.aggregate) {
		options.aggregate = 'COUNT';
	}
	
	if (options.aggregate_field == 'default' || !options.aggregate_field) {
		options.aggregate_field = null;
	}
	
	if (options.group_by == 'default' || !options.group_by) {
		options.group_by = 'location';
	}
	
	// Collect Open data
	ga = new GlideAggregate(options.table);
	ga.addEncodedQuery(options.query);
	
	if (options.aggregate == 'COUNT') {
		ga.addAggregate(options.aggregate);
	}
	else {
		ga.addAggregate(options.aggregate, options.aggregate_field);
	}
	
	ga.groupBy(options.group_by);  
	ga.orderBy(options.group_by);  
	ga.query();
	while (ga.next()) { 
		category = ga.getElement(options.group_by).getDisplayValue() + '' || '(empty)';
		
		if (options.aggregate == 'COUNT') {
			count = ga.getAggregate('COUNT') * 1;
		}
		else {
			count = ga.getAggregate(options.aggregate, options.aggregate_field) * 1;
		}
		
		series[category] = count;
	}
	
	// Prepare output objects
	data.categories = Object.keys(series);
	data.series = [{
		'name': options.series_name,
		'legendIndex': 0,
		'data': []
	}]
	
	// Transform collected objects into data arrays
	data.categories.forEach(function(it) {
		data.series[0].data.push(series[it]);
	});
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>workhstayh</sys_created_by>
        <sys_created_on>2018-08-10 09:47:27</sys_created_on>
        <sys_id>2a079016db335300329ffe1ebf9619c8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Copy of HighCharts</sys_name>
        <sys_package display_value="Generic" source="x_80404_generic">0cbcea8fdb879300329ffe1ebf96192b</sys_package>
        <sys_policy/>
        <sys_scope display_value="Generic">0cbcea8fdb879300329ffe1ebf96192b</sys_scope>
        <sys_update_name>sp_widget_2a079016db335300329ffe1ebf9619c8</sys_update_name>
        <sys_updated_by>workhstayh</sys_updated_by>
        <sys_updated_on>2018-08-10 09:47:27</sys_updated_on>
        <template><![CDATA[<div><!-- your widget template --></div>]]></template>
        <u_record_sysid/>
        <u_sys_id/>
    </sp_widget>
</record_update>
